{
  "name": "node-resources",
  "version": "0.1.0",
  "description": "A helper to register routes from modules on restify and ExpressJS. Improves separation of concerns and propose a different code organization on your application.",
  "main": "index.js",
  "scripts": {
    "test": "mocha tests/*.tests.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:hgarcia/node-resources.git"
  },
  "devDependencies": {
    "mocha": "1.7.4",
    "should": "1.2.1"
  },
  "keywords": [
    "rest",
    "resources",
    "routes",
    "registration",
    "ExpressJS",
    "restify"
  ],
  "author": {
    "name": "Hernan Garcia",
    "email": "hernan@dynamicprogrammer.com",
    "url": "http://dynamicprogrammer.com"
  },
  "license": "MIT",
  "readme": "node-resources\n================\n\nWhen working on Restify or ExpressJS applications you usually see a file structure based on routes, models and views.\n\n    |_app.js\n    |_routes\n    | |_hello.js\n    |_models\n    | |_hello.js\n    |_views\n      |_hello\n        |_index.ejs\n        |_edit.ejs\n\nThis structure is very common to other MVC frameworks as well.\n\nI found that this structure works well for small or medium size projects but after a while it can get a bit out of control. The main problem is that code that belong together and is relate is split all over the place what makes developing small modules in isolation very complicate.\n\nI prefer the following code organization.\n\n    |_app.js\n    |_resources\n      |_hello\n        |_index.js\n        |_handlers.js\n        |_models\n        | |_hello.js\n        |_views\n          |_index.ejs\n          |_edit.ejs\n\nThis approach makes each module self contained.\n\n## Caveats\n\nYou want to make sure that inter-dependency between this modules is keep to a minimum.\n\n## Usage\n\nInstall as usual via npm\n\n    npm install node-resources\n\nTo use the structure above you should do the following.\n\n    var resources = require('node-resources');\n    resources.registerRoutes(server, {path: __dirname + \"/resources\"});\n\n## Api\n\nThe module exports only one method `registerRoutes(server, options)`\nThe `options` argument can have two properties.\n\n### options.path\n\nThis is mandatory and if not passed it should throw an Error.\n\n### options.pattern\n\nYou can use this property to specify a pattern to search for a file inside the module to require. This is useful if you don't want to use an `index.js` file in each module or if you want to give use for something different.\n\nEx: given you have the following module.\n\n    |_cars\n      |_cars.routes.js\n      |_handlers.js\n      |_models\n      | |_cars.js\n      |_views\n        |_list.ejs\n\nYour `options.pattern` should be `[folder].routes.js`\nThe `[folder]` token is the only one accepted in the pattern and will be replaced by the folder name at the root of the module.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hgarcia/node-resources/issues"
  },
  "_id": "node-resources@0.1.0",
  "_from": "node-resources@0.1.0"
}
